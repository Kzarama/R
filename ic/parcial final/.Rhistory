runs.test(signo.error, alternative = "less")
runs.test(signo.error, alternative = "greater")
library(AER)
dwtest(res1, alternative = "two.sided")
dwtest(res1, alternative = "greater")
dwtest(res1, alternative = "less")
Box.test(e, lag=1)
tabla.Box.Pierce <- function(residuo, max.lag = 20, type = "Box-Pierce") {
# se crean objetos para guardar los resultados
BP.estadistico <- matrix(0, max.lag, 1)
BP.pval <- matrix(0, max.lag, 1)
# se calcula la prueba para los diferentes rezagos
for (i in 1:max.lag) {
BP <- Box.test(residuo, lag = i, type = type)
BP.estadistico[i] <- BP$statistic
BP.pval[i] <- round(BP$p.value, 5)
}
labels <- c("Rezagos", type, "p-valor")
Cuerpo.Tabla <- cbind(matrix(1:max.lag, max.lag, 1), BP.estadistico,
BP.pval)
TABLABP <- data.frame(Cuerpo.Tabla)
names(TABLABP) <- labels
return(TABLABP)
}
tabla.Box.Pierce(e)
install.packages("lmtest")
library(lmtest)
bgtest(res1, order=1)
tabla.Breusch.Godfrey <- function(modelo, max.order = 5) {
# se crean objetos para guardar los resultados
BG.estadistico <- matrix(0, max.order, 1)
BG.pval <- matrix(0, max.order, 1)
# se calcula la prueba para los diferentes rezagos
for (i in 1:max.order) {
BG <- bgtest(modelo, order = i)
BG.estadistico[i] <- -BG$statistic
BG.pval[i] <- round(BG$p.value, 5)
}
labels <- c("Orden AR(s)", "Breusch-Godfrey", "p-valor")
Cuerpo.Tabla <- cbind(matrix(1:max.order, max.order, 1),
BG.estadistico, BG.pval)
TABLABP <- data.frame(Cuerpo.Tabla)
names(TABLABP) <- labels
return(TABLABP)
}
tabla.Breusch.Godfrey(res1)
library(sandwich)
coeftest(res1, vcov=NeweyWest(res1))
install.packages("lmtest")
knitr::opts_chunk$set(echo = TRUE)
coeftest(res1, vcov=NeweyWest(res1))
library(sandwich)
coeftest(res1, vcov=NeweyWest(res1))
knitr::opts_chunk$set(echo = TRUE)
res1 <- lm(price.adjusted ~ ., base)
summary(res1)
e <- residuals(res1)
class(e)
library(xts)
par(mfrow=c(2,1))
ts.plot(e, main="Errores estimados", xlab="tiempo", ylab="errores")
plot(e, lag.xts(e), xlab="errores(t)", ylab="errores (t-1)", xlim=c(-6, 6), ylim=c(-6, 6))
reg <- lm(e ~ lag.xts(e))
abline(reg, col="blue")
#install.packages("tseries")
library(tseries)
signo.error <- factor(e > 0)
head(signo.error)
runs.test(signo.error)
runs.test(signo.error, alternative = "less")
runs.test(signo.error, alternative = "greater")
library(AER)
dwtest(res1, alternative = "two.sided")
dwtest(res1, alternative = "greater")
dwtest(res1, alternative = "less")
Box.test(e, lag=1)
tabla.Box.Pierce <- function(residuo, max.lag = 20, type = "Box-Pierce") {
# se crean objetos para guardar los resultados
BP.estadistico <- matrix(0, max.lag, 1)
BP.pval <- matrix(0, max.lag, 1)
# se calcula la prueba para los diferentes rezagos
for (i in 1:max.lag) {
BP <- Box.test(residuo, lag = i, type = type)
BP.estadistico[i] <- BP$statistic
BP.pval[i] <- round(BP$p.value, 5)
}
labels <- c("Rezagos", type, "p-valor")
Cuerpo.Tabla <- cbind(matrix(1:max.lag, max.lag, 1), BP.estadistico,
BP.pval)
TABLABP <- data.frame(Cuerpo.Tabla)
names(TABLABP) <- labels
return(TABLABP)
}
tabla.Box.Pierce(e)
#install.packages("lmtest")
library(lmtest)
bgtest(res1, order=1)
tabla.Breusch.Godfrey <- function(modelo, max.order = 5) {
# se crean objetos para guardar los resultados
BG.estadistico <- matrix(0, max.order, 1)
BG.pval <- matrix(0, max.order, 1)
# se calcula la prueba para los diferentes rezagos
for (i in 1:max.order) {
BG <- bgtest(modelo, order = i)
BG.estadistico[i] <- -BG$statistic
BG.pval[i] <- round(BG$p.value, 5)
}
labels <- c("Orden AR(s)", "Breusch-Godfrey", "p-valor")
Cuerpo.Tabla <- cbind(matrix(1:max.order, max.order, 1),
BG.estadistico, BG.pval)
TABLABP <- data.frame(Cuerpo.Tabla)
names(TABLABP) <- labels
return(TABLABP)
}
tabla.Breusch.Godfrey(res1)
library(sandwich)
coeftest(res1, vcov=NeweyWest(res1))
coeftest(res1, vcov=NeweyWest(res1))
library(sandwich)
coeftest(res1, vcov=NeweyWest(res1))
library(sandwich)
coeftest(res1, vcov=NeweyWest(res1))
coeftest(res1, vcov=NeweyWest(res1))
knitr::opts_chunk$set(echo = TRUE)
res1 <- lm(price.adjusted ~ ., base)
summary(res1)
e <- residuals(res1)
class(e)
library(xts)
par(mfrow=c(2,1))
ts.plot(e, main="Errores estimados", xlab="tiempo", ylab="errores")
plot(e, lag.xts(e), xlab="errores(t)", ylab="errores (t-1)", xlim=c(-6, 6), ylim=c(-6, 6))
reg <- lm(e ~ lag.xts(e))
abline(reg, col="blue")
#install.packages("tseries")
library(tseries)
signo.error <- factor(e > 0)
head(signo.error)
runs.test(signo.error)
runs.test(signo.error, alternative = "less")
runs.test(signo.error, alternative = "greater")
library(AER)
dwtest(res1, alternative = "two.sided")
dwtest(res1, alternative = "greater")
dwtest(res1, alternative = "less")
Box.test(e, lag=1)
tabla.Box.Pierce <- function(residuo, max.lag = 20, type = "Box-Pierce") {
# se crean objetos para guardar los resultados
BP.estadistico <- matrix(0, max.lag, 1)
BP.pval <- matrix(0, max.lag, 1)
# se calcula la prueba para los diferentes rezagos
for (i in 1:max.lag) {
BP <- Box.test(residuo, lag = i, type = type)
BP.estadistico[i] <- BP$statistic
BP.pval[i] <- round(BP$p.value, 5)
}
labels <- c("Rezagos", type, "p-valor")
Cuerpo.Tabla <- cbind(matrix(1:max.lag, max.lag, 1), BP.estadistico,
BP.pval)
TABLABP <- data.frame(Cuerpo.Tabla)
names(TABLABP) <- labels
return(TABLABP)
}
tabla.Box.Pierce(e)
#install.packages("lmtest")
library(lmtest)
bgtest(res1, order=1)
tabla.Breusch.Godfrey <- function(modelo, max.order = 5) {
# se crean objetos para guardar los resultados
BG.estadistico <- matrix(0, max.order, 1)
BG.pval <- matrix(0, max.order, 1)
# se calcula la prueba para los diferentes rezagos
for (i in 1:max.order) {
BG <- bgtest(modelo, order = i)
BG.estadistico[i] <- -BG$statistic
BG.pval[i] <- round(BG$p.value, 5)
}
labels <- c("Orden AR(s)", "Breusch-Godfrey", "p-valor")
Cuerpo.Tabla <- cbind(matrix(1:max.order, max.order, 1),
BG.estadistico, BG.pval)
TABLABP <- data.frame(Cuerpo.Tabla)
names(TABLABP) <- labels
return(TABLABP)
}
tabla.Breusch.Godfrey(res1)
library(sandwich)
coeftest(res1, vcov=NeweyWest(res1))
coeftest(res1, vcov=NeweyWest(res1))
NeweyWest(res1)
library(sandwich)
coeftest(res1, vcov=NeweyWest(res1))
coeftest(res1, vcoc=kernHAC(res1))
coeftest(res1, vcoc=weave(res1))
res3 = lm(price.adjusted ~ )
names(base)
res3 = lm(price.adjusted ~ price.open + price.high + price.low + price.close + volume + ref.date + tickerAMZN + tickerCSCO + tickerFB + tickerGOOGL + tickerHPE  + tickerMSFT + tickerMSI + tickerNFLX + ret.adjusted.prices + ret.closing.prices, base)
res3 = lm(price.adjusted ~ price.open + price.high + price.low + price.close + volume + ref.date + tickerCSCO + tickerFB + tickerGOOGL + tickerHPE  + tickerMSFT + tickerMSI + tickerNFLX + ret.adjusted.prices + ret.closing.prices, base)
View(base)
res3 = lm(price.adjusted ~ price.open + price.high + price.low + price.close + volume + ref.date + ticker + ret.adjusted.prices + ret.closing.prices, base)
knitr::opts_chunk$set(echo = TRUE)
res1 <- lm(price.adjusted ~ ., base)
summary(res1)
e <- residuals(res1)
class(e)
library(xts)
par(mfrow=c(2,1))
ts.plot(e, main="Errores estimados", xlab="tiempo", ylab="errores")
plot(e, lag.xts(e), xlab="errores(t)", ylab="errores (t-1)", xlim=c(-6, 6), ylim=c(-6, 6))
reg <- lm(e ~ lag.xts(e))
abline(reg, col="blue")
#install.packages("tseries")
library(tseries)
signo.error <- factor(e > 0)
head(signo.error)
runs.test(signo.error)
runs.test(signo.error, alternative = "less")
runs.test(signo.error, alternative = "greater")
library(AER)
dwtest(res1, alternative = "two.sided")
dwtest(res1, alternative = "greater")
dwtest(res1, alternative = "less")
Box.test(e, lag=1)
tabla.Box.Pierce <- function(residuo, max.lag = 20, type = "Box-Pierce") {
# se crean objetos para guardar los resultados
BP.estadistico <- matrix(0, max.lag, 1)
BP.pval <- matrix(0, max.lag, 1)
# se calcula la prueba para los diferentes rezagos
for (i in 1:max.lag) {
BP <- Box.test(residuo, lag = i, type = type)
BP.estadistico[i] <- BP$statistic
BP.pval[i] <- round(BP$p.value, 5)
}
labels <- c("Rezagos", type, "p-valor")
Cuerpo.Tabla <- cbind(matrix(1:max.lag, max.lag, 1), BP.estadistico,
BP.pval)
TABLABP <- data.frame(Cuerpo.Tabla)
names(TABLABP) <- labels
return(TABLABP)
}
tabla.Box.Pierce(e)
#install.packages("lmtest")
library(lmtest)
bgtest(res1, order=1)
tabla.Breusch.Godfrey <- function(modelo, max.order = 5) {
# se crean objetos para guardar los resultados
BG.estadistico <- matrix(0, max.order, 1)
BG.pval <- matrix(0, max.order, 1)
# se calcula la prueba para los diferentes rezagos
for (i in 1:max.order) {
BG <- bgtest(modelo, order = i)
BG.estadistico[i] <- -BG$statistic
BG.pval[i] <- round(BG$p.value, 5)
}
labels <- c("Orden AR(s)", "Breusch-Godfrey", "p-valor")
Cuerpo.Tabla <- cbind(matrix(1:max.order, max.order, 1),
BG.estadistico, BG.pval)
TABLABP <- data.frame(Cuerpo.Tabla)
names(TABLABP) <- labels
return(TABLABP)
}
tabla.Breusch.Godfrey(res1)
library(sandwich)
coeftest(res1, vcov=NeweyWest(res1))
NeweyWest(res1)
res1 <- lm(price.adjusted ~ ., base)
summary(res1)
res1 <- lm(price.adjusted ~ ., base)
summary(res1)
```{r}
e <- residuals(res1)
class(e)
library(xts)
par(mfrow=c(2,1))
ts.plot(e, main="Errores estimados", xlab="tiempo", ylab="errores")
plot(e, lag.xts(e), xlab="errores(t)", ylab="errores (t-1)", xlim=c(-6, 6), ylim=c(-6, 6))
reg <- lm(e ~ lag.xts(e))
abline(reg, col="blue")
plot.new()
par(mfrow=c(2,1))
ts.plot(e, main="Errores estimados", xlab="tiempo", ylab="errores")
plot(e, lag.xts(e), xlab="errores(t)", ylab="errores (t-1)", xlim=c(-6, 6), ylim=c(-6, 6))
reg <- lm(e ~ lag.xts(e))
abline(reg, col="blue")
plot.new()
abline(reg, col="blue")
par(mfrow=c(2,1))
ts.plot(e, main="Errores estimados", xlab="tiempo", ylab="errores")
plot(e, lag.xts(e), xlab="errores(t)", ylab="errores (t-1)", xlim=c(-6, 6), ylim=c(-6, 6))
reg <- lm(e ~ lag.xts(e))
plot.new()
abline(reg, col="blue")
par(mfrow=c(2,1))
ts.plot(e, main="Errores estimados", xlab="tiempo", ylab="errores")
plot(e, lag.xts(e), xlab="errores(t)", ylab="errores (t-1)", xlim=c(-6, 6), ylim=c(-6, 6))
reg <- lm(e ~ lag.xts(e))
abline(reg, col="blue")
plot.new()
library(xts)
par(mfrow=c(2,1))
ts.plot(e, main="Errores estimados", xlab="tiempo", ylab="errores")
plot(e, lag.xts(e), xlab="errores(t)", ylab="errores (t-1)", xlim=c(-6, 6), ylim=c(-6, 6))
reg <- lm(e ~ lag.xts(e))
plot.new()
abline(reg, col="blue")
#install.packages("tseries")
library(tseries)
signo.error <- factor(e > 0)
head(signo.error)
runs.test(signo.error)
runs.test(signo.error, alternative = "less")
runs.test(signo.error, alternative = "greater")
library(AER)
dwtest(res1, alternative = "two.sided")
dwtest(res1, alternative = "greater")
dwtest(res1, alternative = "less")
Box.test(e, lag=1)
tabla.Box.Pierce <- function(residuo, max.lag = 20, type = "Box-Pierce") {
# se crean objetos para guardar los resultados
BP.estadistico <- matrix(0, max.lag, 1)
BP.pval <- matrix(0, max.lag, 1)
# se calcula la prueba para los diferentes rezagos
for (i in 1:max.lag) {
BP <- Box.test(residuo, lag = i, type = type)
BP.estadistico[i] <- BP$statistic
BP.pval[i] <- round(BP$p.value, 5)
}
labels <- c("Rezagos", type, "p-valor")
Cuerpo.Tabla <- cbind(matrix(1:max.lag, max.lag, 1), BP.estadistico,
BP.pval)
TABLABP <- data.frame(Cuerpo.Tabla)
names(TABLABP) <- labels
return(TABLABP)
}
tabla.Box.Pierce(e)
#install.packages("lmtest")
library(lmtest)
bgtest(res1, order=1)
tabla.Breusch.Godfrey <- function(modelo, max.order = 5) {
# se crean objetos para guardar los resultados
BG.estadistico <- matrix(0, max.order, 1)
BG.pval <- matrix(0, max.order, 1)
# se calcula la prueba para los diferentes rezagos
for (i in 1:max.order) {
BG <- bgtest(modelo, order = i)
BG.estadistico[i] <- -BG$statistic
BG.pval[i] <- round(BG$p.value, 5)
}
labels <- c("Orden AR(s)", "Breusch-Godfrey", "p-valor")
Cuerpo.Tabla <- cbind(matrix(1:max.order, max.order, 1),
BG.estadistico, BG.pval)
TABLABP <- data.frame(Cuerpo.Tabla)
names(TABLABP) <- labels
return(TABLABP)
}
tabla.Breusch.Godfrey(res1)
library(sandwich)
NeweyWest(res1)
res1 <- lm(price.adjusted ~ ., base)
summary(res1)
NeweyWest(res1)
coeftest(res1, vcov=NeweyWest(res1))
coeftest(res1, vcov=NeweyWest(res1))
coeftest(res1, vcoc=kernHAC(res1))
coeftest(res1, vcoc=weave(res1))
res3 = lm(price.adjusted ~ price.close + ref.date + ticker + ret.adjusted.prices + ret.closing.prices, base)
summary(res3)
waldtest(res3, res1, vcov=NeweyWest(res1))
waldtest(res3, res1, vcov=kernHAC(res1))
knitr::opts_chunk$set(echo = TRUE)
load("data.rdata")
res1 <- lm(price.adjusted ~ ., base)
summary(res1)
e <- residuals(res1)
class(e)
library(xts)
par(mfrow=c(2,1))
ts.plot(e, main="Errores estimados", xlab="tiempo", ylab="errores")
plot(e, lag.xts(e), xlab="errores(t)", ylab="errores (t-1)", xlim=c(-6, 6), ylim=c(-6, 6))
reg <- lm(e ~ lag.xts(e))
abline(reg, col="blue")
#install.packages("tseries")
library(tseries)
signo.error <- factor(e > 0)
head(signo.error)
runs.test(signo.error)
runs.test(signo.error, alternative = "less")
runs.test(signo.error, alternative = "greater")
library(AER)
dwtest(res1, alternative = "two.sided")
dwtest(res1, alternative = "greater")
dwtest(res1, alternative = "less")
Box.test(e, lag=1)
tabla.Box.Pierce <- function(residuo, max.lag = 20, type = "Box-Pierce") {
# se crean objetos para guardar los resultados
BP.estadistico <- matrix(0, max.lag, 1)
BP.pval <- matrix(0, max.lag, 1)
# se calcula la prueba para los diferentes rezagos
for (i in 1:max.lag) {
BP <- Box.test(residuo, lag = i, type = type)
BP.estadistico[i] <- BP$statistic
BP.pval[i] <- round(BP$p.value, 5)
}
labels <- c("Rezagos", type, "p-valor")
Cuerpo.Tabla <- cbind(matrix(1:max.lag, max.lag, 1), BP.estadistico,
BP.pval)
TABLABP <- data.frame(Cuerpo.Tabla)
names(TABLABP) <- labels
return(TABLABP)
}
tabla.Box.Pierce(e)
#install.packages("lmtest")
library(lmtest)
bgtest(res1, order=1)
tabla.Breusch.Godfrey <- function(modelo, max.order = 5) {
# se crean objetos para guardar los resultados
BG.estadistico <- matrix(0, max.order, 1)
BG.pval <- matrix(0, max.order, 1)
# se calcula la prueba para los diferentes rezagos
for (i in 1:max.order) {
BG <- bgtest(modelo, order = i)
BG.estadistico[i] <- -BG$statistic
BG.pval[i] <- round(BG$p.value, 5)
}
labels <- c("Orden AR(s)", "Breusch-Godfrey", "p-valor")
Cuerpo.Tabla <- cbind(matrix(1:max.order, max.order, 1),
BG.estadistico, BG.pval)
TABLABP <- data.frame(Cuerpo.Tabla)
names(TABLABP) <- labels
return(TABLABP)
}
tabla.Breusch.Godfrey(res1)
#install.packages("sandwich")
library(sandwich)
library(lmtest)
coeftest(res1, vcov=NeweyWest(res1))
setwd("~/git/R/ic/parcial final")
knitr::opts_chunk$set(echo = TRUE)
datos <- read.csv("datos.originales.cvs")
datos <- read.csv("datos.orginales.csv")
head(datos)
str(datos)
datos <- datos[, -1]
head(datos)
datos <- read.csv("datos.orginales.csv")
head(datos)
datos <- datos[, -1]
head(datos)
str(datos)
drop.na()
na.omit(datos)
dim(data)
dim(datos)
dim(datos)
knitr::opts_chunk$set(echo = TRUE)
datos <- read.csv("datos.orginales.csv")
dim(datos)
head(datos)
datos <- datos[, -1]
head(datos)
str(datos)
na.omit(datos)
dim(datos)
datos <- na.omit(read.csv("datos.orginales.csv"))
datos <- na.omit(read.csv("datos.orginales.csv"))
head(datos)
datos <- datos[, -1]
head(datos)
dim(datos)
str(datos)
max.model <- lm(Valor.venta ~ ., datos)
max.model <- lm(Valor.Venta ~ ., datos)
summary(max.model)
mim.model <- lm(Valor.Venta ~ 1, datos)
summary(min.model)
summary(min.model)
mim.model <- lm(Valor.Venta ~ 1, datos)
min.model <- lm(Valor.Venta ~ 1, datos)
summary(min.model)
max.model.formula <- formula(max.model)
library(leaps)
fwd.model <- regsubsets(x=max.model.formula, y=Valor.Venta, data=datos, nvmax=100000, method="forward")
plot(fwd.model, scale="bic", main="Criterio BIC")
best.fwd.model <- summaty(fwd.model)
best.fwd.model <- summary(fwd.model)
best.fwd.model.by.bic <- which.min(best.fwd.model$bic)
formula.best.fwd <- as.formula("Valor.Venta ~ + ", paste(vars.fwd.model, collapse=" + ", sep=""))
formula.best.fwd <- as.formula("Valor.Venta ~ + ", paste(vars.fwd.model, collapse=" + "), sep=""))
formula.best.fwd <- as.formula(paste("Valor.Venta ~ + ", paste(vars.fwd.model, collapse=" + "), sep=""))
vars.fwd.model <- names(coef(fwd.model, best.fwd.model.by.bic))
formula.best.fwd <- as.formula(paste("Valor.Venta ~ + ", paste(vars.fwd.model, collapse=" + "), sep=""))
formula.best.fwd
formula.best.fwd <- as.formula(paste("Valor.Venta ~ + 1 ", paste(vars.fwd.model, collapse=" + "), sep=""))
formula.best.fwd
formula.best.fwd <- as.formula(paste("Valor.Venta ~ 1 + ", paste(vars.fwd.model, collapse=" + "), sep=""))
formula.best.fwd
best.model.fwd <- lm(formula.best.fwd, datos)
formula.best.fwd <- as.formula(paste("Valor.Venta ~ 1 + ", paste(vars.fwd.model[2:length(vars.fwd.model)], collapse=" + "), sep=""))
formula.best.fwd
best.model.fwd <- lm(formula.best.fwd, datos)
summary(best.model.fwd)
bwd.model <- regsubsets(x=max.model.formula, y=Valor.Venta, datos, nvmax=100000, method="backward")
plot(bwd.model, scale="bic", main="Empleando BIC")
best.bwd.model <- summary(bwd.model)
best.bwd.model.by.bic <- which.min(best.bwd.model$bic)
vars.bwd.model <- names(coef(bwd.model, best.bwd.model.by.bic))
vars.bwd.model
formula.best.bwd <- as.formula(paste("Valor.Venta ~ 1 + ", paste(vars.bwd.model[2:length(vars.bwd.model)], collapse=" + "), sep=""))
formula.best.bwd
best.model.bwd <- lm(formula.best.bwd, datos)
summary(best.model.bwd)
vars.bwd.model
vars.fwd.model
